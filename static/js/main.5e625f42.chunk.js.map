{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","address","city","CardList","monsters","map","SearchBox","placeholder","onSearchChange","type","onChange","App","event","setState","searchField","target","value","state","fetch","then","response","json","user","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAEaA,G,YAAO,SAACC,GAAD,OACnB,sBAAKC,UAAU,iBAAf,UACC,qBACCC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BACHC,IAAI,YAEL,6BAAKL,EAAMG,QAAQG,OACnB,4BAAIN,EAAMG,QAAQI,QAClB,8CAAeP,EAAMG,QAAQK,QAAQC,aCP1BC,G,MAAW,SAACV,GAAD,OACvB,qBAAKC,UAAU,YAAf,SACED,EAAMW,SAASC,KAAI,SAACT,GAAD,OACnB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCHTS,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,eAAhB,OACxB,uBACCd,UAAU,SACVe,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCkDGG,E,kDArDd,aAAe,IAAD,8BACb,gBAYDH,eAAiB,SAACI,GACjB,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAZ1C,EAAKC,MAAQ,CACZb,SAAU,GACVU,YAAa,IAJD,E,gEAQO,IAAD,OACnBI,MAAM,8CACJC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAU,EAAKT,SAAS,CAAET,SAAUkB,S,+BAKlC,IAAD,EAC0BC,KAAKN,MAA/Bb,EADA,EACAA,SAAUU,EADV,EACUA,YACZU,EAAmBpB,EAASqB,QAAO,SAAC7B,GAAD,OACxCA,EAAQG,KAAK2B,cAAcC,SAASb,EAAYY,kBAEjD,OACC,sBAAKhC,UAAU,MAAf,UACC,kDACA,cAAC,EAAD,CACCa,YAAY,kBACZC,eAAgBe,KAAKf,iBAEtB,cAAC,EAAD,CAAUJ,SAAUoB,W,GA7BNI,aCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5e625f42.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./card.styles.css\";\r\nexport const Card = (props) => (\r\n\t<div className=\"card-container\">\r\n\t\t<img\r\n\t\t\tsrc={`https://robohash.org/${props.monster.id}?set=set2&size=180x250`}\r\n\t\t\talt=\"monster\"\r\n\t\t/>\r\n\t\t<h2>{props.monster.name}</h2>\r\n\t\t<p>{props.monster.email}</p>\r\n\t\t<p>{` City : ${props.monster.address.city}`}</p>\r\n\t</div>\r\n);\r\n","import React from \"react\";\r\nimport { Card } from \"../card/card.component\";\r\nimport \"./card-list.styles.css\";\r\nexport const CardList = (props) => (\r\n\t<div className=\"card-list\">\r\n\t\t{props.monsters.map((monster) => (\r\n\t\t\t<Card key={monster.id} monster={monster} />\r\n\t\t))}\r\n\t</div>\r\n);\r\n","import React from \"react\";\r\nimport \"./search-box.styles.css\";\r\n\r\nexport const SearchBox = ({ placeholder, onSearchChange }) => (\r\n\t<input\r\n\t\tclassName=\"search\"\r\n\t\ttype=\"search\"\r\n\t\tplaceholder={placeholder}\r\n\t\tonChange={onSearchChange}\r\n\t/>\r\n);\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport { CardList } from \"./components/card-list/card-list.component\";\r\nimport { SearchBox } from \"./components/search-box/search-box.component\";\r\nclass App extends Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tmonsters: [],\r\n\t\t\tsearchField: \"\",\r\n\t\t};\r\n\t}\r\n\t//  gets the Api data\r\n\tcomponentDidMount() {\r\n\t\tfetch(\"https://jsonplaceholder.typicode.com/users\")\r\n\t\t\t.then((response) => response.json()) //we get the promise and convert it into json format using .json method then it will be returned as new promise\r\n\t\t\t.then((user) => this.setState({ monsters: user })); // again using the .then method we get the promise or the array that we got from it and we set monsters to the array.\r\n\t}\r\n\tonSearchChange = (event) => {\r\n\t\tthis.setState({ searchField: event.target.value });\r\n\t};\r\n\trender() {\r\n\t\tconst { monsters, searchField } = this.state;\r\n\t\tconst filteredMonsters = monsters.filter((monster) =>\r\n\t\t\tmonster.name.toLowerCase().includes(searchField.toLowerCase())\r\n\t\t);\r\n\t\treturn (\r\n\t\t\t<div className=\"App\">\r\n\t\t\t\t<h1>Monsters Rolodex</h1>\r\n\t\t\t\t<SearchBox\r\n\t\t\t\t\tplaceholder=\"search monsters\"\r\n\t\t\t\t\tonSearchChange={this.onSearchChange}\r\n\t\t\t\t/>\r\n\t\t\t\t<CardList monsters={filteredMonsters} />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n// function App() {\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <header className=\"App-header\">\r\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n//         <p>Hello my name is Sauvic</p>\r\n//         <a\r\n//           className=\"App-link\"\r\n//           href=\"https://reactjs.org\"\r\n//           target=\"_blank\"\r\n//           rel=\"noopener noreferrer\"\r\n//         >\r\n//           Learn React\r\n//         </a>\r\n//       </header>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}